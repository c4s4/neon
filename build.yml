# Neon build file (http://github.com/c4s4/neon)

doc:     Build file for NeON
default: [clean, bin, test, integ]
extends:
- c4s4/build/golang.yml
- c4s4/build/release.yml
- c4s4/build/github.yml

properties:
  NAME:      'neon'
  ARC_DIR:   '={BUILD_DIR}/={NAME}-={VERSION}'
  REFERENCE: 'doc/reference.md'
  LIBRARIES:
  - 'github.com/mitchellh/gox'
  - 'gopkg.in/yaml.v2'
  - 'github.com/c4s4/anko'
  - 'github.com/mattn/go-zglob'
  - 'github.com/fatih/color'

environment:
  GOPATH: =_BASE
  PATH:   '={_BASE}/bin:${PATH}'

targets:

  fmt:
    doc: Reformat code
    steps:
    - print: 'Formatting code with fmt'
    - $: ['gofmt', '-s', '-w', 'src/neon/']

  test:                                                                         
    doc: Run Go tests
    steps:
    - $: ['go', 'test', '={NAME}/...']

  integ:
    doc:     Run integration tests
    depends: bin
    steps:
    - print: 'Running integration tests'
    - for: 'file'
      in:  'find("test", "**/*.yml")'
      do:
      - print: "Running build file '={file}'"
      - $: ['bin/neon', '-file', 'test/={file}']

  bin:
    doc: Build neon binary
    steps:
    - print: "Building neon binary in 'bin/neon'"
    - delete: 'bin/neon'
    - $: ['go', 'install', '-ldflags', '-X main.VERSION=={VERSION}', =NAME]

  refs:
    doc: Generate reference documentation
    depends: bin
    steps:
    - $: 'bin/neon -refs > ={REFERENCE}'
    - try:
      - $: ['git', 'diff', '--quiet', '--exit-code', =REFERENCE]
      catch:
      - $: ['git', 'add', =REFERENCE]
      - $: ['git', 'commit', '-m', 'Updated reference', =REFERENCE]

  doc:
    doc: Build documentations
    steps:
    - mkdir: =BUILD_DIR
    - copy:  'LICENSE.txt'
      todir: '=BUILD_DIR'
    - $: ['md2pdf', '-o', '={BUILD_DIR}/README.pdf', 'README.md']
    - $: 'changelog to markdown > ={BUILD_DIR}/CHANGELOG.md'
    - $: ['md2pdf', '-o', '={BUILD_DIR}/CHANGELOG.pdf', 
          '={BUILD_DIR}/CHANGELOG.md']
    - delete: '={BUILD_DIR}/CHANGELOG.md'
    - $: ['md2pdf', '-o', '={BUILD_DIR}/quickstart.pdf', 'doc/quickstart.md']
    - $: ['md2pdf', '-o', '={BUILD_DIR}/usermanual.pdf', 'doc/usermanual.md']
    - $: ['md2pdf', '-o', '={BUILD_DIR}/reference.pdf', 'doc/reference.md']

  binaries:
    doc: Generate binaries for all platforms
    steps:
    - mkdir: '={BUILD_DIR}/bin/'
    - $: ['gox', '-ldflags', '-X main.VERSION=={VERSION}',
          '-output=={BUILD_DIR}/bin/{{.Dir}}-{{.OS}}-{{.Arch}}', =NAME]

  archive:
    doc: Generate distribution archive
    depends: [doc, binaries]
    steps:
    - mkdir: =ARC_DIR
    - copy:  'bin/*'
      dir:   =BUILD_DIR
      todir: =ARC_DIR
    - copy:  'bash/*'
      todir: =ARC_DIR
    - copy:  ['CHANGELOG.pdf', 'LICENSE.txt', 'README.pdf']
      dir:   =BUILD_DIR
      todir: =ARC_DIR
    - mkdir: '={ARC_DIR}/doc'
    - copy:  ['quickstart.pdf', 'reference.pdf', 'usermanual.pdf']
      dir:   =BUILD_DIR
      todir: '={ARC_DIR}/doc'
    - tar:    '={NAME}-={VERSION}/**/*'
      dir:    =BUILD_DIR
      tofile: '={BUILD_DIR}/={NAME}-={VERSION}.tar.gz'

  release:
    depends: [clean, test, integ, refs, archive]
    steps:
    - super:

  windows:
    doc: Build binary for Windows
    steps:
    - mkdir: =BUILD_DIR
    - $: ['gox', '-ldflags', '-X main.VERSION=={VERSION}', 
          '-osarch=windows/386', '-output=={BUILD_DIR}/={NAME}', =NAME]
