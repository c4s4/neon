# Neon Build File (http://github.com/c4s4/neon)

doc:     Build file for NeON
default: [clean, fmt, check, test]
extends: [golang, changelog]
expose:  [test, install, release, NAME, WEB_HOME]

properties:
  NAME:      'neon'
  PACKAGE:   =NAME
  BIN_DIR:   '={env("GOPATH")}/bin'
  REFERENCE: 'doc/reference.md'
  WEB_HOME:  'casa@sweetohm.net:/home/web/dist/neon'
  ARC_FILES:
  - files: ['CHANGELOG.yml', 'LICENSE.txt', 'README.md', 'bash/*']
  - {files: 'bin/*', dir: =BUILD_DIR}
  - {files: 'doc/*.pdf', dir: =BUILD_DIR}
  LIBRARIES:
  - github.com/c4s4/changelog
  - github.com/fatih/color
  - github.com/mattn/anko
  - github.com/mattn/go-zglob
  - gopkg.in/yaml.v2

environment:
  GOPATH: '${GOPATH}:={_BASE}'

targets:

  test:
    doc: Run unit tests
    depends: clean
    steps:
    - super:

  install:
    doc: Build neon binary
    depends: version
    steps:
    - print: "Building neon binary"
    - delete: '={env("GOPATH")}/bin/neon'
    - $: ['go', 'build', '-ldflags', '-X neon/build.NeonVersion=={VERSION}',
          '-o', '={BIN_DIR}/neon', =NAME]

  refs:
    doc: Generate reference documentation
    depends: install
    steps:
    - $:  ['={BIN_DIR}/neon', '-refs']
      1>: ={REFERENCE}
      1x: true
    - try:
      - $: ['git', 'diff', '--quiet', '--exit-code', =REFERENCE]
      catch:
      - $: ['git', 'add', =REFERENCE]
      - $: ['git', 'commit', '-m', 'Updated reference', =REFERENCE]

  doc:
    doc: Build documentations
    steps:
    - mkdir: '={BUILD_DIR}/doc'
    - $: ['md2pdf', '-o', '={BUILD_DIR}/doc/quickstart.pdf', 'doc/quickstart.md']
    - $: ['md2pdf', '-o', '={BUILD_DIR}/doc/usermanual.pdf', 'doc/usermanual.md']
    - $: ['md2pdf', '-o', '={BUILD_DIR}/doc/reference.pdf', 'doc/reference.md']

  binaries:
    doc: Generate binaries for all platforms
    depends: version
    steps:
    - mkdir: '={BUILD_DIR}/bin/'
    - $: ['gox', '-ldflags', '-X neon/build.NeonVersion=={VERSION}',
          '-output=={BUILD_DIR}/bin/{{.Dir}}-{{.OS}}-{{.Arch}}', =NAME]

  archive:
    doc: Generate distribution archive
    depends: [doc, binaries]
    steps:
    - super:

  deploy:
    doc: Deploy installation script and binaries
    depends: binaries
    steps:
    - mkdir: =BUILD_DIR
    - print: 'Deploying neon binaries...'
    - $: ['scp', 'bash/install', =WEB_HOME]
    - write: '={BUILD_DIR}/version'
      text:  =VERSION
    - $: ['scp', '={BUILD_DIR}/version', =WEB_HOME]
    - 'binaries = join(find(".", BUILD_DIR+"/bin/*"), " ")'
    - $: 'scp ={binaries} ={WEB_HOME}'

  release:
    doc: Perform release
    depends: [clean, libs, check, test, refs, archive, deploy]
    steps:
    - super:

  bugs:
    doc: Run bug build files
    depends: bin
    steps:
    - for: file
      in:  'find(joinpath("test", "bugs"), "*.yml")'
      do:
      - 'path = joinpath("test", "bugs", file)'
      - print: "Running build file '={path}'"
      - try:
        - $: ['bin/neon', '-file', =path]

  win-exe:
    doc: Generate binary and copy files to test on Windows
    depends: version
    steps:
    - delete: =BUILD_DIR
    - mkdir:  =BUILD_DIR
    - $: ['gox', '-ldflags', '-X neon/build.NeonVersion=={VERSION}',
          '-output=/home/casa/dsk/Todo/shared/neon',
          '-os', 'Windows', '-arch', '386']
    - copy:    ['build.yml', 'test/**/*.yml']
      exclude: 'test/bugs/**/*'
      todir:   '~/dsk/Todo/shared/'

  win-test:
    doc: Run integration tests on Windows
    steps:
    - for: file
      in:  'filter(find(".", "test/**/*.yml"), "test/bugs/*.yml")'
      do:
      - $: ['./neon.exe', '-file', =file]
