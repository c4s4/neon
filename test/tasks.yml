doc: Built file to test tasks
default:
- task_$
- task_cat
- task_chdir
- task_chmod
- task_copy
- task_delete
- task_for
- task_if
- task_link
- task_mkdir
- task_move
- task_pass
- task_path
- task_print
- task_read
- task_replace
- task_script
- task_sleep
- task_tar
- task_throw
- task_time
- task_touch
- task_try
- task_while
- task_write
- task_zip

properties:
  BUILD_DIR: "../build"

targets:

  task_$:
    doc: Test task $
    steps:
    - if: '_OS != "windows"'
      then:
      - $: 'echo "TEST"'
        =: 'result'
      - |
        if result != "TEST" {
          throw("$ test failure")
        } else {
          println("$ test success")
        }

  task_assert:
    doc: Test task assert
    steps:
    - assert: 'true'
    - 'success = true'
    - try:
      - assert: 'false'
      - 'success = false'
    - if: '!success'
      then:
      - throw: 'Assert test failure'
      else:
      - print: 'Assert test success'


  task_cat:
    doc: Test task cat
    steps:
    - mkdir: "#{BUILD_DIR}/cat"
    - touch: "#{BUILD_DIR}/cat/test.txt"
    - cat: "#{BUILD_DIR}/cat/test.txt"

  task_chdir:
    doc: Test task chdir
    steps:
    - mkdir: "#{BUILD_DIR}"
    - |
      filepath = import("path/filepath")
      buildDir = filepath.Abs(BUILD_DIR)
    - chdir: "#{BUILD_DIR}"
    - |
      os = import("os")
      dir = os.Getwd()
      if dir != buildDir {
        println(dir)
        println(buildDir)
        throw("Chdir test failure")
      } else {
        println("Chdir test success")
      }

  task_chmod:
    doc: Test task chmod
    steps:
    - mkdir: "#{BUILD_DIR}/chmod"
    - touch: "#{BUILD_DIR}/chmod/test.txt"
    - chmod: "test.txt"
      dir: "#{BUILD_DIR}/chmod"
      mode: "0755"

  task_copy:
    doc: Test task copy
    steps:
    - mkdir: "#{BUILD_DIR}/copy/src"
    - mkdir: "#{BUILD_DIR}/copy/dst"
    - touch:
      - "#{BUILD_DIR}/copy/src/foo.txt"
      - "#{BUILD_DIR}/copy/src/bar.txt"
    - copy:    "**/*.txt"
      dir:     "#{BUILD_DIR}/copy/src"
      exclude: "**/bar*"
      todir:   "#{BUILD_DIR}/copy/dst"
    - |
      files = toString(find(BUILD_DIR, "copy/dst/*"))
      if files != "[copy/dst/foo.txt]" {
        throw("ERROR: " + files)
      } else {
        println("Copy test success")
      }

  task_delete:
    doc: Test task delete
    steps:
    # delete a directory
    - mkdir: "#{BUILD_DIR}/delete/foo"
    - touch: "#{BUILD_DIR}/delete/foo/test.txt"
    - delete: "#{BUILD_DIR}/delete/foo"
    - |
      os = import("os")
      filepath = import("path/filepath")
      file = filepath.Join(BUILD_DIR, "delete", "foo")
      _, err = os.Stat(file)
      if err == nil {
        throw("Delete test failure")
      } else {
        println("Delete test success")
      }
    # delete files
    - touch: "#{BUILD_DIR}/delete/test.txt"
    - delete: "#{BUILD_DIR}/delete/test.txt"
    - |
      os = import("os")
      filepath = import("path/filepath")
      file = filepath.Join(BUILD_DIR, "delete", "test.txt")
      _, err = os.Stat(file)
      if err == nil {
        throw("Delete test failure")
      } else {
        println("Delete test success")
      }

  task_for:
    doc: Test doc task
    steps:
    - 'sum = 0'
    - for: i
      in: [1, 2, 3]
      do:
      - 'sum = sum + i'
    - |
      if sum != 6 {
        throw("For test failure")
      } else {
        println("For test success")
      }

  task_if:
    doc: If task success
    steps:
    - 'failure = true'
    - if: failure
      then:
      - 'failure = false'
    - |
      if failure {
        throw("If test failure")
      } else {
        println("If test success")
      }

  task_link:
    doc: Test task link
    steps:
    - if: '_OS != "windows"'
      then:
      - delete:  "#{BUILD_DIR}/link"
      - mkdir: "#{BUILD_DIR}/link"
      - touch: "#{BUILD_DIR}/link/foo"
      - link: "#{BUILD_DIR}/link/foo"
        to:   "#{BUILD_DIR}/link/bar"
      - |
        files = toString(find(BUILD_DIR, "link/*"))
        if files != "[link/bar link/foo]" {
          throw("ERROR: " + files)
        } else {
          println("Link test success")
        }

  task_mkdir:
    doc: Test task mkdir
    steps:
    - mkdir: "#{BUILD_DIR}/mkdir"
    - |
      os = import("os")
      filepath = import("path/filepath")
      dir = filepath.Join(BUILD_DIR, "mkdir")
      stat, err = os.Stat(dir)
      if err != nil {
        throw("Mkdir test failure")
      } else if !stat.IsDir() {
        throw("Mkdir task failure")
      } else {
        println("Mkdir test success")
      }

  task_move:
    doc: Test task move
    steps:
    - mkdir: "#{BUILD_DIR}/move/src"
    - mkdir: "#{BUILD_DIR}/move/dst"
    - touch:
      - "#{BUILD_DIR}/move/src/foo.txt"
      - "#{BUILD_DIR}/move/src/bar.txt"
    - move:    "**/*.txt"
      dir:     "#{BUILD_DIR}/move/src"
      exclude: "**/bar*"
      todir:   "#{BUILD_DIR}/move/dst"
    - |
      files_dst = toString(find(BUILD_DIR, "move/dst/*"))
      files_src = toString(find(BUILD_DIR, "move/src/*"))
      if files_dst != "[move/dst/foo.txt]" || files_src != "[move/src/bar.txt]" {
        throw("ERROR: " + files_dst + " + " + files_src)
      } else {
        println("Move test success")
      }

  task_pass:
    doc: Test task pass
    steps:
    - pass:
    - print: "Pass test success"

  task_path:
    doc: Test task path
    steps:
    - mkdir: "#{BUILD_DIR}/path/lib"
    - touch:
      - "#{BUILD_DIR}/path/lib/foo.jar"
      - "#{BUILD_DIR}/path/lib/bar.jar"
    - path: "lib/*.jar"
      dir: "#{BUILD_DIR}/path"
      to: "classpath"
    - |
      path = "lib/bar.jar:lib/foo.jar"
      if _OS == "windows" {
        path = "lib/bar.jar;lib/foo.jar"
      }
      if classpath != path {
        throw("Path test failure: "+classpath)
      } else {
        println("Path test success")
      }

  task_print:
    doc: Test task print
    steps:
    - print: "Print test success"

  task_read:
    doc: Test task read
    steps:
    - mkdir: "#{BUILD_DIR}/read"
    - |
      ioutil = import("io/ioutil")
      filepath = import("path/filepath")
      file = filepath.Join(BUILD_DIR, "read", "test.txt")
      ioutil.WriteFile(file, toByteSlice("TEST"), 420)
    - read: "#{BUILD_DIR}/read/test.txt"
      to: "read"
    - |
      if read != "TEST" {
        throw("Read test failure")
      } else {
        println("Read test success")
      }

  task_replace:
    doc: Test task replace
    steps:
    - mkdir: "#{BUILD_DIR}/replace"
    - write: "#{BUILD_DIR}/replace/test.txt"
      text: "Hello World!"
    - replace: "#{BUILD_DIR}/replace/test.txt"
      pattern: "World"
      with: "You"
    - |
      ioutil = import("io/ioutil")
      filepath = import("path/filepath")
      file = filepath.Join(BUILD_DIR, "replace", "test.txt")
      content, err = ioutil.ReadFile(file)
      if err != nil {
        throw("Write test failure")
      }
      if toString(content) != "Hello You!" {
        throw("Write test failure")
      }
      println("Write test sucess")

  task_script:
    doc: Test task script
    steps:
    - 'println("Script test success")'

  task_sleep:
    doc: Test task sleep
    steps:
    - sleep: 0.1
    - sleep: 1

  task_tar:
    doc: Tast task tar
    steps:
    - mkdir: "#{BUILD_DIR}/tar/foo"
    - touch:
      - "#{BUILD_DIR}/tar/foo/spam.txt"
      - "#{BUILD_DIR}/tar/foo/eggs.txt"
    - tar: "**/*.txt"
      dir: "#{BUILD_DIR}/tar"
      prefix: "bar"
      tofile: "#{BUILD_DIR}/tar/test.tar.gz"
    - print: "Tar test success"

  task_throw:
    doc: Test task throw
    steps:
    - 'error = ""'
    - try:
      - throw: 'This is a test'
      catch:
      - if: '_error == "This is a test"'
        then:
        - print: 'Throw task test success'
        else:
        - throw: "Throw task test failure"

  task_time:
    doc: Test task time
    steps:
    - time:
      - pass:
    - time:
      - pass:
      to: duration
    - print: 'duration: #{duration}s'
    - print: "Time test success"

  task_touch:
    doc: Test task touch
    steps:
    - mkdir: "#{BUILD_DIR}/touch"
    - touch: "#{BUILD_DIR}/touch/foo"
    - |
      files = toString(find(BUILD_DIR, "touch/*"))
      if files != "[touch/foo]" {
        throw("ERROR: " + files)
      } else {
        println("Touch test success")
      }

  task_try:
    doc: Test task try
    steps:
    # simple try/catch: error is trapped in catch clause
    - try:
      - throw: "Test"
      catch:
      - |
        if _error != "Test" {
          throw("Try test failure")
        } else {
          println("Try test success")
        }
    # single try: execution continue, even if an error occurs
    - try:
      - throw: "Try test failure"
    # try/catch/finally: finally run whatever happens
    - try:
      - throw: "Test"
      catch:
      - 'error = "catched"'
      finally:
      - |
        if error != "catched" {
          throw("Try test failure")
        } else {
          println("Try test success")
        }

  task_while:
    doc: Test while task
    steps:
    - 'i = 0'
    - while: 'i < 10'
      do:
      - 'i++'
    - |
      if i != 10 {
        throw("While test failure")
      } else {
        println("While test success")
      }

  task_write:
    doc: Test task write
    steps:
    - mkdir: "#{BUILD_DIR}/write"
    - write: "#{BUILD_DIR}/write/test.txt"
      text:  "Hello World!"
    - |
      ioutil = import("io/ioutil")
      filepath = import("path/filepath")
      file = filepath.Join(BUILD_DIR, "write", "test.txt")
      content, err = ioutil.ReadFile(file)
      if err != nil {
        throw("Write test failure")
      }
      if toString(content) != "Hello World!" {
        throw("Write test failure")
      }
      println("Write test sucess")
    - write:  "#{BUILD_DIR}/write/test.txt"
      text:   " And you too!"
      append: true
    - |
      ioutil = import("io/ioutil")
      filepath = import("path/filepath")
      file = filepath.Join(BUILD_DIR, "write", "test.txt")
      content, err = ioutil.ReadFile(file)
      if err != nil {
        throw("Write test failure")
      }
      if toString(content) != "Hello World! And you too!" {
        throw("Write test failure")
      }
      println("Write test sucess")

  task_zip:
    doc: Test task zip
    steps:
    - mkdir: "#{BUILD_DIR}/zip/foo"
    - touch:
      - "#{BUILD_DIR}/zip/foo/spam.txt"
      - "#{BUILD_DIR}/zip/foo/eggs.txt"
    - zip: "**/*.txt"
      dir: "#{BUILD_DIR}/zip"
      prefix: "bar"
      tofile: "#{BUILD_DIR}/zip/test.zip"
    - print: "Zip test success"
