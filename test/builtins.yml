doc: Built file to test builds
default:
- builtin_directory
- builtin_escapeurl
- builtin_exists
- builtin_expand
- builtin_filename
- builtin_filter
- builtin_find
- builtin_join
- builtin_joinpath
- builtin_lowercase
- builtin_now
- builtin_older
- builtin_run
- builtin_split
- builtin_throw
- builtin_unescapeurl
- builtin_uppercase
- builtin_winexe

properties:
  BUILD_DIR: "../build"

targets:

  builtin_directory:
    doc: Test the directory builtin function
    steps:
    - |
      actual = directory("/foo/bar/spam.txt")
      expected = "/foo/bar"
      if _OS == "windows" {
        expected = `\foo\bar`
      }
      if actual != expected {
        throw("Directory test failure")
      } else {
        println("Directory test success")
      }

  builtin_escapeurl:
    doc: Test the escapeurl builtin function
    steps:
    - |
      escaped = escapeurl("/foo bar")
      if escaped != "/foo%20bar" {
        throw("Escapeurl test failure")
      } else {
        println("Escapeurl test success")
      }

  builtin_exists:
    doc: Test exists builtin function
    steps:
    - mkdir: "#{BUILD_DIR}/exists"
    - |
      if !exists(joinpath(BUILD_DIR, "exists")) {
        throw("Exists test failure")
      } else {
        println("Exists test success")
      }

  builtin_expand:
    doc: Test expand builtin function
    steps:
    - if: '_OS != "windows"'
      then:
      - |
        os = import("os")
        actual = expand("~/foo")
        expected = os.Getenv("HOME") + "/foo"
        if actual != expected {
          throw("Expand test failure")
        } else {
          println("Expand test success")
        }

  builtin_filename:
    doc: Test the filename builtin function
    steps:
    - |
      file = filename("/foo/bar/spam.txt")
      if file != "spam.txt" {
        throw("Filename test failure")
      } else {
        println("Filename test success")
      }

  builtin_filter:
    doc: Test the filter builtin function
    steps:
    - mkdir: "#{BUILD_DIR}/filter"
    - touch:
      - "#{BUILD_DIR}/filter/foo.txt"
      - "#{BUILD_DIR}/filter/bar.txt"
    - |
      files = toString(filter(find(BUILD_DIR, "filter/**/*.txt"), "filter/**/bar*"))
      if files != "[filter/foo.txt]" {
        throw("ERROR: " + files)
      } else {
        println("Filter test success")
      }

  builtin_find:
    doc: Test the find builtin function
    steps:
    - mkdir: "#{BUILD_DIR}/find/spam"
    - touch:
      - "#{BUILD_DIR}/find/foo"
      - "#{BUILD_DIR}/find/spam/bar"
    - |
      files = toString(find(BUILD_DIR+"/find", "**/*"))
      if files != "[foo spam spam/bar]" {
        throw("ERROR: " + files)
      } else {
        println("Find test success")
      }

  builtin_join:
    doc: Test the join builtin function
    steps:
    - |
      s = join(["foo", "bar"], " ")
      if s != "foo bar" {
        throw("Join test failure")
      } else {
        println("Join test success")
      }

  builtin_joinpath:
    doc: Test the joinpath builtin function
    steps:
    - |
      path = joinpath("/foo", "bar", "spam.txt")
      expected = "/foo/bar/spam.txt"
      if _OS == "windows" {
        expected = `\foo\bar\spam.txt`
      }
      if path != expected {
        throw("Joinpath test failure")
      } else {
        println("Joinpath test success")
      }

  builtin_lowercase:
    doc: Test the lowercase builtin function
    steps:
    - |
      upper = lowercase("TEST")
      if upper != "test" {
        throw("Lowercase test failure")
      } else {
        println("Lowercase test success")
      }

  builtin_now:
    doc: Test the now builtin function
    steps:
    - |
      r = import("regexp")
      n = now()
      match, err = r.MatchString(`\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d`, n)
      if !match || err != nil {
        throw("ERROR now '"+n+"'")
      } else {
        println("Now test success")
      }

  builtin_older:
    doc: Test the older builtin function
    steps:
    - delete: '#{BUILD_DIR}/older'
    - mkdir: '#{BUILD_DIR}/older'
    - touch: '#{BUILD_DIR}/older/source'
    - touch: '#{BUILD_DIR}/older/result'
    - |
      if older(joinpath(BUILD_DIR, "older/source"), joinpath(BUILD_DIR, "older/result")) {
        throw("Older test failure")
      } else {
        println("Older test success")
      }
    - touch: '#{BUILD_DIR}/older/source'
    - |
      if older(joinpath(BUILD_DIR, "older/source"), joinpath(BUILD_DIR, "older/result")) {
        println("Older test success")
      } else {
        throw("Older test failure")
      }
    - delete: '#{BUILD_DIR}/older/result'
    - |
      if older(joinpath(BUILD_DIR, "older/source"), joinpath(BUILD_DIR, "older/result")) {
        println("Older test success")
      } else {
        throw("Older test failure")
      }

  builtin_read:
    doc: Test read builtin function
    steps:
    - mkdir: "#{BUILD_DIR}/read"
    - write: "#{BUILD_DIR}/read/test.txt"
      text:  "Hello World!"
    - |
      text := read(joinpath(BUILD_DIR, "read", "test.txt"))
      if text != "Hello World!" {
        throw("Read test failure")
      } else {
        println("Read test success")
      }

  builtin_run:
    doc: Test run builtin function
    steps:
    - if: '_OS != "windows"'
      then:
      - |
        n = run("date", "--iso-8601")
        match, err = r.MatchString(`\d\d\d\d-\d\d-\d\d`, n)
        if !match || err != nil {
          throw("ERROR run '"+n+"'")
        } else {
          println("Run test success")
        }

  builtin_split:
    doc: Test split builtin function
    steps:
    - |
      s = split("foo bar", " ")
      if len(s) != 2 || s[0] != "foo" || s[1] != "bar" {
        throw("ERROR split '"+s+"'")
      } else {
        println("Split test success")
      }

  builtin_throw:
    doc: Test the throw builtin function
    steps:
    - try:
      - 'throw("TEST")'
      catch:
      - |
        if _error != "evaluating script: TEST (at line 1, column 1)" {
          throw("Throw test failure")
        } else {
          println("Throw test success")
        }

  builtin_unescapeurl:
    doc: Test the unescapeurl builtin function
    steps:
    - |
      unescaped = unescapeurl("/foo%20bar")
      if unescaped != "/foo bar" {
        throw("Unescapeurl test failure")
      } else {
        println("Unescapeurl test success")
      }

  builtin_uppercase:
    doc: Test the uppercase builtin function
    steps:
    - |
      upper = uppercase("test")
      if upper != "TEST" {
        throw("Uppercase test failure")
      } else {
        println("Uppercase test success")
      }

  builtin_winexe:
    doc: Test the winexe builtin function
    steps:
    - |
      result = winexe("foo")
      if _OS == "windows" && result != "foo.exe" {
        throw("Winexe test failure")
      }
      if _OS != "windows" && result != "foo" {
        throw("Winexe test failure")
      }
      result = winexe("foo.sh")
      if _OS == "windows" && result != "foo.bat" {
        throw("Winexe test failure")
      }
      if _OS != "windows" && result != "foo.sh" {
        throw("Winexe test failure")
      }
      println("Winexe test success")
